name: Generate Changelog
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install UV
        uses: astral-sh/setup-uv@v6
      - name: Generate internal changelog
        id: generate-internal-changelog
        uses: ./
        with:
          prompt-file: internal-changelog-prompt.md
          base-ref: ${{github.base_ref}}
          head-ref: ${{github.head_ref}}
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: ${{vars.AWS_DEFAULT_REGION}}
      - name: Generate external changelog
        id: generate-external-changelog
        uses: ./
        with:
          prompt-file: external-changelog-prompt.md
          base-ref: ${{github.base_ref}}
          head-ref: ${{github.head_ref}}
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: ${{vars.AWS_DEFAULT_REGION}}
      - name: Comment on PR
        uses: actions/github-script@v7
        env:
          INTERNAL_CHANGELOG: ${{steps.generate-internal-changelog.outputs.changelog}}
          EXTERNAL_CHANGELOG: ${{steps.generate-external-changelog.outputs.changelog}}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const header = '### Automated Changelog';
            const internal = `<details><summary>Internal</summary>\n\n${process.env.INTERNAL_CHANGELOG}</details>`
            const external = `<details><summary>External</summary>\n\n${process.env.EXTERNAL_CHANGELOG}</details>`
            const body = header + "\n\n" + internal + "\n\n" + external;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && comment.body.startsWith(header)
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
